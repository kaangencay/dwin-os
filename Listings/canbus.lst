C51 COMPILER V9.60.0.0   CANBUS                                                            12/09/2022 13:55:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CANBUS
OBJECT MODULE PLACED IN .\Objects\canbus.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE driver\canbus.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\source)
                    - DEBUG OBJECTEXTEND PRINT(.\Listings\canbus.lst) TABS(2) OBJECT(.\Objects\canbus.obj)

line level    source

   1          #include "canbus.h"
   2          #include "timer.h"
   3          //如果使用CAN，那么sys.h  必须增加如下宏定义  #define INTVPACTION
   4          
   5          /*CAN总线位时间参数的设定与调整
   6          1、 确定时间份额
   7              时间份额数量为8~25
   8              位时间=1/波特率           ( 250K           4us)
   9              时间份额=位时间/时间份额数量        
  10              BRP=时间份额/(2*tclk)=  时间份额/2*FOSC=206*200/2000=40      
  11          2、 设置时间段和采样点
  12              时间份额数量=1+T1+T2
  13              采样点80%最佳
  14              (1+T1)/(1+T1+T2)=0.8
  15              就可以确定T1  T2
  16              传播时间段和相位缓冲器段1  =T1
  17              相位缓冲器段2              =T2
  18          3、 确定同步跳转宽度和采样次数
  19              同步跳转宽度1~4  尽量大
  20          
  21          */
  22          CANBUSUNIT   CanData;
  23          //https://blog.csdn.net/weixin_44536482/article/details/89030152
  24          //125K{0x3F,0x40,0x72,0x00},250K{0x1F,0x40,0x72,0x00},500K{0x0F,0x40,0x72,0x00},1M{0x07,0x40,0x72,0x00}
  25          //根据T5L应用开发指南3.8对CAN接口进行初始化
  26          void CanBusInit(u8* RegCfg)
  27          {
  28   1        SetPinOut(0,2);
  29   1        SetPinIn(0,3);
  30   1        PinOutput(0,2,1);
  31   1        MUX_SEL |= 0x80;    //将CAN接口引出到P0.2,P0.3  
  32   1        ADR_H = 0xFF;
  33   1        ADR_M = 0x00;
  34   1        ADR_L = 0x60;
  35   1        ADR_INC = 1;
  36   1        RAMMODE = 0x8F;   //写操作
  37   1        while(!APP_ACK);
  38   1        #if 0
                DATA3 = 17;
                DATA2 = 0x4c;
                DATA1 = 0x1f;
                DATA0 = 0x00; 
                #else
  44   1        DATA3 = RegCfg[0];
  45   1        DATA2 = RegCfg[1];
  46   1        DATA1 = RegCfg[2];
  47   1        DATA0 = RegCfg[3];      
  48   1        #endif    
  49   1        APP_EN = 1;
  50   1        while(APP_EN);
  51   1        DATA3 = 0;
  52   1        DATA2 = 0;
  53   1        DATA1 = 0;
  54   1        DATA0 = 0;      //配置验收寄存器ACR
C51 COMPILER V9.60.0.0   CANBUS                                                            12/09/2022 13:55:09 PAGE 2   

  55   1        APP_EN = 1;   
  56   1        while(APP_EN);
  57   1        DATA3 = 0xFF;
  58   1        DATA2 = 0xFF;
  59   1        DATA1 = 0xFF;
  60   1        DATA0 = 0xFF;   //配置AMR
  61   1        APP_EN = 1; 
  62   1        while(APP_EN);
  63   1        RAMMODE = 0;
  64   1        CAN_CR = 0xA0;
  65   1        while(CAN_CR&0x20); //执行配置FF0060-FF0062动作
  66   1        ECAN = 1;     //打开CAN中断 
  67   1      }
  68          
  69          
  70          /**************************************************************
  71          D3  1  CAN_RX_BUFFER  [7] IDE ，[6]RTR， [3:0]―DLC，帧数据长度。
  72          0xFF:0068
  73          D2:D0  3  未定义 
  74          ID  ID，扩展帧时 29bit 有效，标准帧时 11bit 有效。
  75          D3  1  ID 第一个字节，标准帧与扩展帧。
  76          D2  1  ID 第二个字节，[7:5]为标准帧的高 3bit，扩展帧第 2 字节。
  77          D1  1  ID 第三个字节，标准帧无效，扩展帧第 3 字节。
  78          0xFF:0069
  79          D0  1  ID 第四个字节，标准帧无效，[7:3]-扩展帧的高 5bit。
  80          0xFF:006A  D3:D0  4  数据  接收数据，DATA1-DATA4。
  81          0xFF:006B  D3:D0  4  数据  接收数据，DATA5-DATA8。
  82          ******************************************************************/
  83          //对于T5L1和T5L2必须在main函数，while(1)中调用
  84          void CanErrorReset(void)
  85          {
  86   1        // EA=0;
  87   1        if(CAN_ET&0X20)
  88   1        {
  89   2          CAN_ET &= 0XDF;
  90   2          CAN_CR |= 0X40;
  91   2          delay_us(1000);
  92   2          CAN_CR &= 0XBF;  
  93   2          CanData.CanTxFlag = 0;
  94   2        }
  95   1        // EA=1;
  96   1      }
  97          
  98          
  99          void LoadOneFrame(void)
 100          {
 101   1        ADR_H = 0xFF;
 102   1        ADR_M = 0x00;
 103   1        ADR_L = 0x64;
 104   1        ADR_INC = 1;
 105   1        RAMMODE = 0x8F;   //写操作
 106   1        while(!APP_ACK);
 107   1        DATA3 = CanData.BusTXbuf[CanData.CanTxTail].status;     //帧类长度型以及数据
 108   1        DATA2 = 0;
 109   1        DATA1 = 0;
 110   1        DATA0 = 0;      
 111   1        APP_EN = 1;
 112   1        while(APP_EN);    //写入RTR,IDE,DLC等数据
 113   1        DATA3 = (u8)(CanData.BusTXbuf[CanData.CanTxTail].ID>>24);
 114   1        DATA2 = (u8)(CanData.BusTXbuf[CanData.CanTxTail].ID>>16);
 115   1        DATA1 = (u8)(CanData.BusTXbuf[CanData.CanTxTail].ID>>8);
 116   1        DATA0 = (u8)(CanData.BusTXbuf[CanData.CanTxTail].ID);     
C51 COMPILER V9.60.0.0   CANBUS                                                            12/09/2022 13:55:09 PAGE 3   

 117   1        APP_EN = 1;
 118   1        while(APP_EN);    //写入ID数据
 119   1        DATA3 = CanData.BusTXbuf[CanData.CanTxTail].candata[0];
 120   1        DATA2 = CanData.BusTXbuf[CanData.CanTxTail].candata[1];
 121   1        DATA1 = CanData.BusTXbuf[CanData.CanTxTail].candata[2];
 122   1        DATA0 = CanData.BusTXbuf[CanData.CanTxTail].candata[3];     
 123   1        APP_EN = 1;
 124   1        while(APP_EN);    //写入发送数据前4字节
 125   1        DATA3 = CanData.BusTXbuf[CanData.CanTxTail].candata[4];
 126   1        DATA2 = CanData.BusTXbuf[CanData.CanTxTail].candata[5];
 127   1        DATA1 = CanData.BusTXbuf[CanData.CanTxTail].candata[6];
 128   1        DATA0 = CanData.BusTXbuf[CanData.CanTxTail].candata[7];     
 129   1        APP_EN = 1;
 130   1        while(APP_EN);    //写入发送数据后4字节
 131   1        CanData.CanTxTail++;
 132   1        RAMMODE = 0;
 133   1      }
 134          
 135          //status主要用于提供IDE 和 RTR状态，实际发送长度有len自动处理，大于8字节会自动拆分成多包
 136          void CanTx(u32 ID, u8 status, u16 len, const u8 *pData)
 137          {
 138   1        u8 i,j,k,framnum,framoffset;
 139   1        u32 idtmp,statustmp;
 140   1      
 141   1        if(len>2048)//发送长度大于队列长度
 142   1          return;
 143   1        if(status&0x80)//扩展帧
 144   1        {
 145   2          idtmp = ID << 3;
 146   2        }
 147   1        else
 148   1        {
 149   2          idtmp = ID << 21;
 150   2        }
 151   1        if(CanData.BusTXbuf[CanData.CanTxHead].status&0x40)//远程帧不需要发送数据
 152   1        {
 153   2          CanData.BusTXbuf[CanData.CanTxHead].ID = idtmp;
 154   2          CanData.BusTXbuf[CanData.CanTxHead].status = status&0xC0;//远程帧发送长度强制清零
 155   2          CanData.CanTxHead++;
 156   2        }
 157   1        else
 158   1        {
 159   2          framnum = len >> 3;
 160   2          framoffset = len % 8;
 161   2          k=0;
 162   2          statustmp = status&0xC0;
 163   2          for(i=0;i<framnum;i++)
 164   2          {
 165   3            CanData.BusTXbuf[CanData.CanTxHead].ID = idtmp;
 166   3            CanData.BusTXbuf[CanData.CanTxHead].status = statustmp | 0x08;
 167   3            for(j=0;j<8;j++)
 168   3            {
 169   4              CanData.BusTXbuf[CanData.CanTxHead].candata[j] = pData[k];
 170   4              k++;
 171   4            }
 172   3            CanData.CanTxHead++;
 173   3          }
 174   2          if(framoffset)
 175   2          {
 176   3            CanData.BusTXbuf[CanData.CanTxHead].ID = idtmp;
 177   3            CanData.BusTXbuf[CanData.CanTxHead].status = statustmp | framoffset;
 178   3            for(j=0;j<framoffset;j++)
C51 COMPILER V9.60.0.0   CANBUS                                                            12/09/2022 13:55:09 PAGE 4   

 179   3            {
 180   4              CanData.BusTXbuf[CanData.CanTxHead].candata[j] = pData[k];
 181   4              k++;
 182   4            }
 183   3            for(;j<8;j++)
 184   3              CanData.BusTXbuf[CanData.CanTxHead].candata[j] = 0;
 185   3            CanData.CanTxHead++;
 186   3          }
 187   2        }
 188   1        if(0==CanData.CanTxFlag)
 189   1        {
 190   2          EA = 0;
 191   2          LoadOneFrame();
 192   2          EA = 1;
 193   2          CanData.CanTxFlag = 1;
 194   2          CAN_CR |= 0x04;   //启动发送
 195   2        }
 196   1      }
 197          
 198          void Can_Isr() interrupt 9
 199          {
 200   1        u8 status;
 201   1        
 202   1        EA = 0;
 203   1        if((CAN_IR&0x80) == 0x80)
 204   1        {
 205   2          CAN_IR &= 0x3F; //清空远程帧标记位      
 206   2        }
 207   1        if((CAN_IR&0x40) == 0x40)
 208   1        {
 209   2          CAN_IR &= 0xBF; //清空数据帧标记位
 210   2          ADR_H = 0xFF;
 211   2          ADR_M = 0x00;
 212   2          ADR_L = 0x68;
 213   2          ADR_INC = 1;
 214   2          RAMMODE = 0xAF;   //读操作
 215   2          while(!APP_ACK);
 216   2          APP_EN = 1;
 217   2          while(APP_EN);
 218   2          status = DATA3;
 219   2          CanData.BusRXbuf[CanData.CanRxHead].status = status;
 220   2          APP_EN = 1;
 221   2          while(APP_EN);      
 222   2          CanData.BusRXbuf[CanData.CanRxHead].ID <<= 8;
 223   2          CanData.BusRXbuf[CanData.CanRxHead].ID |= DATA3;
 224   2          CanData.BusRXbuf[CanData.CanRxHead].ID <<= 8;
 225   2          CanData.BusRXbuf[CanData.CanRxHead].ID |= DATA2;
 226   2          CanData.BusRXbuf[CanData.CanRxHead].ID <<= 8;
 227   2          CanData.BusRXbuf[CanData.CanRxHead].ID |= DATA1;
 228   2          CanData.BusRXbuf[CanData.CanRxHead].ID <<= 8;
 229   2          CanData.BusRXbuf[CanData.CanRxHead].ID |= DATA0;
 230   2          CanData.BusRXbuf[CanData.CanRxHead].ID=CanData.BusRXbuf[CanData.CanRxHead].ID>>3;
 231   2          if(0==(status&0x80))//标准帧ID还需要右移18位
 232   2          {
 233   3            CanData.BusRXbuf[CanData.CanRxHead].ID >>= 18;
 234   3          }
 235   2          if(0==(status&0x40))//数据帧才需要读取数据
 236   2          {
 237   3            APP_EN = 1;
 238   3            while(APP_EN);
 239   3            CanData.BusRXbuf[CanData.CanRxHead].candata[0] = DATA3;
 240   3            CanData.BusRXbuf[CanData.CanRxHead].candata[1] = DATA2;
C51 COMPILER V9.60.0.0   CANBUS                                                            12/09/2022 13:55:09 PAGE 5   

 241   3            CanData.BusRXbuf[CanData.CanRxHead].candata[2] = DATA1;
 242   3            CanData.BusRXbuf[CanData.CanRxHead].candata[3] = DATA0;
 243   3            APP_EN = 1;
 244   3            while(APP_EN);
 245   3            CanData.BusRXbuf[CanData.CanRxHead].candata[4] = DATA3;
 246   3            CanData.BusRXbuf[CanData.CanRxHead].candata[5] = DATA2;
 247   3            CanData.BusRXbuf[CanData.CanRxHead].candata[6] = DATA1;
 248   3            CanData.BusRXbuf[CanData.CanRxHead].candata[7] = DATA0; 
 249   3          }
 250   2          RAMMODE = 0;
 251   2          CanData.CanRxHead++;
 252   2        }
 253   1        if((CAN_IR&0x20) == 0x20)
 254   1        {
 255   2          CAN_IR &= ~(0x20);  //清空发送帧标记位
 256   2          if(CanData.CanTxTail != CanData.CanTxHead)
 257   2          {
 258   3            LoadOneFrame();
 259   3            CAN_CR |= 0x04;   //启动发送    
 260   3          }
 261   2          else
 262   2          {
 263   3            CanData.CanTxFlag = 0;//清空发送标记位
 264   3          }
 265   2        }
 266   1        if((CAN_IR&0x10) == 0x10)
 267   1        {
 268   2          CAN_IR &= 0xEF; //清空接收溢出标记位
 269   2        }
 270   1        if((CAN_IR&0x08) == 0x08)
 271   1        {
 272   2          CAN_IR &= 0xF7; //清空错误标记位
 273   2        }
 274   1        if((CAN_IR&0x04) == 0x04)
 275   1        {
 276   2          CAN_IR &= 0xFB; //清空仲裁失败标记位
 277   2          CAN_CR |= 0x04; //重新启动发送  
 278   2        }
 279   1        CAN_ET=0;
 280   1        EA = 1;  
 281   1      }
 282          
 283          
 284          /*主循环调用，将需要发送的数据放在缓存区即可，同时CAN发送会占用定时器7，其余位置则不能在使用*/
 285          // void CANTx(void)
 286          // {
 287          //  u32 tmp32;
 288          //  if((0==CanData.CanTxFlag)&&(CanData.CanTxTail != CanData.CanTxFlag))
 289          //  {
 290          //    EA = 0;
 291          //    tmp32=CanData.BusTXbuf[CanData.CanTxTail].ID;
 292          //    ADR_H = 0xFF;
 293          //    ADR_M = 0x00;
 294          //    ADR_L = 0x64;
 295          //    ADR_INC = 1;
 296          //    RAMMODE = 0x8F;   //写操作
 297          //    while(!APP_ACK);
 298          //    DATA3 = CanData.BusTXbuf[CanData.CanTxTail].status;     //帧类长度型以及数据
 299          //    DATA2 = 0;
 300          //    DATA1 = 0;
 301          //    DATA0 = 0;      
 302          //    APP_EN = 1;
C51 COMPILER V9.60.0.0   CANBUS                                                            12/09/2022 13:55:09 PAGE 6   

 303          //    while(APP_EN);    //写入RTR,IDE,DLC等数据
 304          //    DATA3 = (u8)(tmp32>>24);
 305          //    DATA2 = (u8)(tmp32>>16);
 306          //    DATA1 = (u8)(tmp32>>8);
 307          //    DATA0 = (u8)(tmp32>>0);     
 308          //    APP_EN = 1;
 309          //    while(APP_EN);    //写入ID数据
 310          //    DATA3 = CanData.BusTXbuf[CanData.CanTxTail].candata[0];
 311          //    DATA2 = CanData.BusTXbuf[CanData.CanTxTail].candata[1];
 312          //    DATA1 = CanData.BusTXbuf[CanData.CanTxTail].candata[2];
 313          //    DATA0 = CanData.BusTXbuf[CanData.CanTxTail].candata[3];     
 314          //    APP_EN = 1;
 315          //    while(APP_EN);    //写入发送数据前4字节
 316          //    DATA3 = CanData.BusTXbuf[CanData.CanTxTail].candata[4];
 317          //    DATA2 = CanData.BusTXbuf[CanData.CanTxTail].candata[5];
 318          //    DATA1 = CanData.BusTXbuf[CanData.CanTxTail].candata[6];
 319          //    DATA0 = CanData.BusTXbuf[CanData.CanTxTail].candata[7];     
 320          //    APP_EN = 1;
 321          //    while(APP_EN);    //写入发送数据后4字节
 322          //    CanData.CanTxTail++;
 323          //    CanData.CanTxFlag = 1;
 324          //    StartTimer(7,3000);//3S还未发送出去，则清空发送标记
 325          //    EA = 1;
 326          //    RAMMODE = 0;
 327          //    CAN_CR |= 0x04;   //启动发送    
 328          //  }
 329          //  if(CanData.CanTxFlag!=0)
 330          //  {
 331          //    if(GetTimeOutFlag(7))
 332          //    {
 333          //      CanData.CanTxFlag = 0;
 334          //    }
 335          //  }
 336          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2052    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   6661      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
