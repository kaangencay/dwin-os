C51 COMPILER V9.60.0.0   MYMODBUS                                                          12/09/2022 13:52:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MYMODBUS
OBJECT MODULE PLACED IN .\Objects\MYModBus.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE driver\MYModBus.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\sourc
                    -e) DEBUG OBJECTEXTEND PRINT(.\Listings\MYModBus.lst) TABS(2) OBJECT(.\Objects\MYModBus.obj)

line level    source

   1          #include "MYModBus.h"
   2          #include "sys.h"
   3          #include "uart.h"
   4          #include "vars.h"
   5          //#include "function.h"
   6          #include "math.h"
   7          #include "stdio.h"
   8          #include "ui.h"
   9          
  10          u8 xdata ID ;
  11          u16 xdata CRC_C;
  12          u8 xdata Send_Buf[20];
  13           
  14          
  15          const u8 code auchCRCHi[]={
  16          0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
  17          0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
  18          0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
  19          0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,
  20          0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,
  21          0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,
  22          0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,
  23          0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
  24          0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
  25          0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,
  26          0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
  27          0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,
  28          0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
  29          0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,
  30          0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,
  31          0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,
  32          0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
  33          0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
  34          0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
  35          0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
  36          0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,
  37          0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,
  38          0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
  39          0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
  40          0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
  41          0x80,0x41,0x00,0xC1,0x81,0x40};
  42          
  43          
  44          const u8 code auchCRCLo[]={
  45          0x00,0xC0,0xC1,0x01,0xC3,0x03,0x02,0xC2,0xC6,0x06,
  46          0x07,0xC7,0x05,0xC5,0xC4,0x04,0xCC,0x0C,0x0D,0xCD,
  47          0x0F,0xCF,0xCE,0x0E,0x0A,0xCA,0xCB,0x0B,0xC9,0x09,
  48          0x08,0xC8,0xD8,0x18,0x19,0xD9,0x1B,0xDB,0xDA,0x1A,
  49          0x1E,0xDE,0xDF,0x1F,0xDD,0x1D,0x1C,0xDC,0x14,0xD4,
  50          0xD5,0x15,0xD7,0x17,0x16,0xD6,0xD2,0x12,0x13,0xD3,
  51          0x11,0xD1,0xD0,0x10,0xF0,0x30,0x31,0xF1,0x33,0xF3,
  52          0xF2,0x32,0x36,0xF6,0xF7,0x37,0xF5,0x35,0x34,0xF4,
  53          0x3C,0xFC,0xFD,0x3D,0xFF,0x3F,0x3E,0xFE,0xFA,0x3A,
  54          0x3B,0xFB,0x39,0xF9,0xF8,0x38,0x28,0xE8,0xE9,0x29,
C51 COMPILER V9.60.0.0   MYMODBUS                                                          12/09/2022 13:52:00 PAGE 2   

  55          0xEB,0x2B,0x2A,0xEA,0xEE,0x2E,0x2F,0xEF,0x2D,0xED,
  56          0xEC,0x2C,0xE4,0x24,0x25,0xE5,0x27,0xE7,0xE6,0x26,
  57          0x22,0xE2,0xE3,0x23,0xE1,0x21,0x20,0xE0,0xA0,0x60,
  58          0x61,0xA1,0x63,0xA3,0XA2,0x62,0x66,0xA6,0xA7,0x67,
  59          0xA5,0x65,0x64,0xA4,0x6C,0xAC,0xAD,0x6D,0xAF,0x6F,
  60          0x6E,0xAE,0xAA,0x6A,0x6B,0xAB,0x69,0xA9,0xA8,0x68,
  61          0x78,0xB8,0xB9,0x79,0xBB,0x7B,0x7A,0xBA,0xBE,0x7E,
  62          0x7F,0xBF,0x7D,0xBD,0xBC,0x7C,0xB4,0x74,0x75,0xB5,
  63          0x77,0xB7,0xB6,0x76,0x72,0xB2,0xB3,0x73,0xB1,0x71,
  64          0x70,0xB0,0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,
  65          0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54,0x9C,0x5C,
  66          0x5D,0x9D,0x5F,0x9F,0x9E,0x5E,0x5A,0x9A,0x9B,0x5B,
  67          0x99,0x59,0x58,0x98,0x88,0x48,0x49,0x89,0x4B,0x8B,
  68          0x8A,0x4A,0x4E,0x8E,0x8F,0x4F,0x8D,0x4D,0x4C,0x8C,
  69          0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,
  70          0x43,0x83,0x41,0x81,0x80,0x40};
  71          
  72          
  73          
  74          unsigned int crc16(volatile unsigned char *puchMsg, unsigned char usDataLen) 
  75          {
  76   1        unsigned char uchCRCHi = 0xFF;/*高CRC字节初始化*/
  77   1        unsigned char uchCRCLo = 0xFF; /*低CRC字节初始化*/ 
  78   1        unsigned long uIndex; /* CRC循环中的索引*/
  79   1        
  80   1        while (usDataLen--) /* 传输消息缓冲区*/
  81   1        {
  82   2          uIndex = uchCRCHi^ *puchMsg++ ; /*计算CRC */
  83   2          uchCRCHi = uchCRCLo^(auchCRCHi[uIndex]);
  84   2          uchCRCLo = auchCRCLo[uIndex];
  85   2        }
  86   1        return (uchCRCHi << 8 | uchCRCLo);
  87   1      
  88   1      }
  89          
  90          
  91          
  92          
  93          
  94          void SendString(  unsigned char *str,unsigned char len)
  95          {
  96   1        unsigned int k=0;
  97   1          do 
  98   1          {
  99   2              UART4_Sendbyte(  *(str + k) );
 100   2              k++;
 101   2          } while(len--);
 102   1        delay_ms(5);
 103   1      } 
 104          
 105          
 106          
 107          void Send_ModBus( unsigned char CMD, u16 Address ,u16 dat,unsigned char count) 
 108          {
 109   1        
 110   1        ID = 0x01;
 111   1      
 112   1        switch (CMD){
 113   2          case 0x03:
 114   2          {
 115   3            Send_Buf[0] = ID ;
 116   3            Send_Buf[1] = CMD ; 
C51 COMPILER V9.60.0.0   MYMODBUS                                                          12/09/2022 13:52:00 PAGE 3   

 117   3            Send_Buf[2] = (Address&0xFF00)>>8;
 118   3            Send_Buf[3] = Address&0x00FF;
 119   3            Send_Buf[4] = 0x00;
 120   3            Send_Buf[5] = count;
 121   3            
 122   3            CRC_C=crc16(Send_Buf, 6);
 123   3            Send_Buf[6] = (CRC_C&0xFF00)>>8 ;
 124   3            Send_Buf[7] = CRC_C&0xFF ;
 125   3            SendString(Send_Buf,7);
 126   3            break;
 127   3          }
 128   2          case 0x05:
 129   2          {
 130   3            Send_Buf[0] = ID ;
 131   3            Send_Buf[1] = CMD ; 
 132   3            Send_Buf[2] = (Address&0xFF00)>>8;
 133   3            Send_Buf[3] = Address&0x00FF;
 134   3            Send_Buf[4] =  (dat&0xFF00)>>8;
 135   3            Send_Buf[5] =  dat&0x00FF;
 136   3                
 137   3            CRC_C=crc16(Send_Buf, 6) ;
 138   3            Send_Buf[6] = (CRC_C&0xFF00)>>8 ;
 139   3            Send_Buf[7] = CRC_C&0x00FF ;
 140   3            SendString(Send_Buf,7);
 141   3            break;
 142   3          }
 143   2          case 0x10:
 144   2          {
 145   3            Send_Buf[0] = ID ;
 146   3            Send_Buf[1] = CMD ; 
 147   3            Send_Buf[2] = Address&0xFF00>>8;
 148   3            Send_Buf[3] = Address&0x00FF;
 149   3            Send_Buf[4] = (unsigned char)dat&0xFF00>>8;
 150   3            Send_Buf[5] = (unsigned char)dat&0x00FF;
 151   3                
 152   3            CRC_C=crc16(Send_Buf, 6) ;
 153   3            Send_Buf[6] = CRC_C&0xFF00>>8 ;
 154   3            Send_Buf[7] = CRC_C&0x00FF ;
 155   3      
 156   3            SendString(Send_Buf,7);
 157   3            break;
 158   3          }
 159   2        }
 160   1        
 161   1      }
 162          
 163          void Send_ModBus_10( unsigned char CMD, u16 Address , u16 Register_num ,u16 dat,unsigned char count) 
 164          {
 165   1        
 166   1        ID = 0x01;
 167   1      
 168   1        Send_Buf[0] = ID ;
 169   1        Send_Buf[1] = CMD ; 
 170   1        Send_Buf[2] = (Address&0xFF00)>>8;
 171   1        Send_Buf[3] = Address&0x00FF;
 172   1        Send_Buf[4] = (Register_num&0xFF00)>>8;
 173   1        Send_Buf[5] = Register_num&0x00FF;
 174   1        Send_Buf[6] = count;
 175   1        Send_Buf[7] =  (dat&0xFF00)>>8;
 176   1        Send_Buf[8] =  dat&0x00FF;
 177   1            
 178   1        CRC_C=crc16(Send_Buf,9);
C51 COMPILER V9.60.0.0   MYMODBUS                                                          12/09/2022 13:52:00 PAGE 4   

 179   1        Send_Buf[9] = (CRC_C&0xFF00)>>8 ;
 180   1        Send_Buf[10] = CRC_C&0x00FF ;
 181   1        SendString(Send_Buf,10);
 182   1      }
 183          
 184          
 185          void Send_ModBus04_10( unsigned char CMD, u16 Address , u16 Register_num ,u16 datH,u16 datL,unsigned char 
             -count) 
 186          {
 187   1        
 188   1        ID = 0x01;
 189   1      
 190   1        Send_Buf[0] = ID ;
 191   1        Send_Buf[1] = CMD ; 
 192   1        Send_Buf[2] = (Address&0xFF00)>>8;
 193   1        Send_Buf[3] = Address&0x00FF;
 194   1        Send_Buf[4] = (Register_num&0xFF00)>>8;
 195   1        Send_Buf[5] = Register_num&0x00FF;
 196   1        Send_Buf[6] = count;
 197   1        Send_Buf[7] =  (datH&0xFF00)>>8;
 198   1        Send_Buf[8] =  datH&0x00FF;
 199   1        Send_Buf[9] =  (datL&0xFF00)>>8;
 200   1        Send_Buf[10] =  datL&0x00FF;
 201   1            
 202   1        CRC_C=crc16(Send_Buf,11);
 203   1        Send_Buf[11] = (CRC_C&0xFF00)>>8 ;
 204   1        Send_Buf[12] = CRC_C&0x00FF ;
 205   1        SendString(Send_Buf,12);
 206   1      }
 207          
 208          
 209          
 210          void Send_ModBus_IP(void) 
 211          {
 212   1        sys_read_vp(HMI_WIFI_IP1_Addr,(u8*)&gCtrlPara.WIFI_IP1,1);
 213   1        sys_read_vp(HMI_WIFI_IP2_Addr,(u8*)&gCtrlPara.WIFI_IP2,1);
 214   1        sys_read_vp(HMI_WIFI_IP3_Addr,(u8*)&gCtrlPara.WIFI_IP3,1);
 215   1        sys_read_vp(HMI_WIFI_IP4_Addr,(u8*)&gCtrlPara.WIFI_IP4,1);
 216   1      
 217   1        Send_Buf[0] = 0x01 ;
 218   1        Send_Buf[1] = 0x10 ; 
 219   1        Send_Buf[2] = (HOST_Write_WIFI_IP&0xFF00)>>8;
 220   1        Send_Buf[3] = HOST_Write_WIFI_IP&0x00FF;
 221   1        Send_Buf[4] = 0x00;
 222   1        Send_Buf[5] = 0x04;
 223   1        Send_Buf[6] = 0x08;
 224   1        Send_Buf[7] =  (gCtrlPara.WIFI_IP1&0xFF00)>>8;
 225   1        Send_Buf[8] =  gCtrlPara.WIFI_IP1&0x00FF;
 226   1        Send_Buf[9] =  (gCtrlPara.WIFI_IP2&0xFF00)>>8;
 227   1        Send_Buf[10] =  gCtrlPara.WIFI_IP2&0x00FF;
 228   1        Send_Buf[11] =  (gCtrlPara.WIFI_IP3&0xFF00)>>8;
 229   1        Send_Buf[12] =  gCtrlPara.WIFI_IP3&0x00FF;
 230   1        Send_Buf[13] =  (gCtrlPara.WIFI_IP4&0xFF00)>>8;
 231   1        Send_Buf[14] =  gCtrlPara.WIFI_IP4&0x00FF;
 232   1      
 233   1        CRC_C=crc16(Send_Buf, 15) ;
 234   1        Send_Buf[15] = (CRC_C&0xFF00)>>8 ;
 235   1        Send_Buf[16] = CRC_C&0x00FF ;
 236   1        SendString(Send_Buf,16);
 237   1      }
 238          
 239          
C51 COMPILER V9.60.0.0   MYMODBUS                                                          12/09/2022 13:52:00 PAGE 5   

 240          void Send_ModBus08_10( unsigned char CMD, u16 Address , u16 Register_num ,u16 datH,u16 datL,u16 dat1H,u16 
             -dat1L,unsigned char count) 
 241          {
 242   1        
 243   1        ID = 0x01;
 244   1      
 245   1        Send_Buf[0] = ID ;
 246   1        Send_Buf[1] = CMD ; 
 247   1        Send_Buf[2] = (Address&0xFF00)>>8;
 248   1        Send_Buf[3] = Address&0x00FF;
 249   1        Send_Buf[4] = (Register_num&0xFF00)>>8;
 250   1        Send_Buf[5] = Register_num&0x00FF;
 251   1        Send_Buf[6] = count;
 252   1        Send_Buf[7] =  (datH&0xFF00)>>8;
 253   1        Send_Buf[8] =  datH&0x00FF;
 254   1        Send_Buf[9] =  (datL&0xFF00)>>8;
 255   1        Send_Buf[10] =  datL&0x00FF;
 256   1        Send_Buf[11] =  (dat1H&0xFF00)>>8;
 257   1        Send_Buf[12] =  dat1H&0x00FF;
 258   1        Send_Buf[13] =  (dat1L&0xFF00)>>8;
 259   1        Send_Buf[14] =  dat1L&0x00FF;
 260   1            
 261   1        CRC_C=crc16(Send_Buf,15);
 262   1        Send_Buf[15] = (CRC_C&0xFF00)>>8 ;
 263   1        Send_Buf[16] = CRC_C&0x00FF ;
 264   1        SendString(Send_Buf,16);
 265   1      }
 266          
 267          
 268          
 269          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    984    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =     23      54
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
