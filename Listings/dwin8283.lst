C51 COMPILER V9.60.0.0   DWIN8283                                                          12/09/2022 13:55:10 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DWIN8283
OBJECT MODULE PLACED IN .\Objects\dwin8283.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source\dwin8283.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\sourc
                    -e) DEBUG OBJECTEXTEND PRINT(.\Listings\dwin8283.lst) TABS(2) OBJECT(.\Objects\dwin8283.obj)

line level    source

   1          #include "dwin8283.h"
   2          #include "uart.h"
   3          #include "canbus.h"
   4          
   5          #define NUM 2
   6          #define DWIN_UART 0
   7          
   8          #define MAX_BYTE_LEN 512
   9          #define MIN_CHECK_LEN 6
  10          #define FRAME_HEAD 0x5AA5
  11          #define WRITE_VP 0x82
  12          #define READ_VP 0x83
  13          // #define ENABLE_CRC
  14          #define AUTO_UPLOAD
  15          
  16          QUENE DwinFrame[NUM];
  17          u8 SendTmp[MAX_BYTE_LEN];
  18          CANBUS8283  DataBuf;
  19          
  20          void Pro8283Init(void)
  21          {
  22   1          u8 buf[2];
  23   1          u32 baud;
  24   1          u8 CanReg[4]={0x0F,0x40,0x72,0x00};
  25   1      
  26   1          read_dgus_vp(0x01,buf,2);
  27   1          baud = 3225600/(buf[0] << 8 | buf[1]);
  28   1          
  29   1          //UartInit(DWIN_UART,115200); //使用8283协议，初始化相关串口波特率
  30   1          UartInit(DWIN_UART,baud);
  31   1          CanBusInit(CanReg);
  32   1      
  33   1          DwinFrame[0].pQuene = Uart_Struct[DWIN_UART].rx_buf;
  34   1          DwinFrame[0].QueneHead = &Uart_Struct[DWIN_UART].rx_head;
  35   1          DwinFrame[0].QueneTail = &Uart_Struct[DWIN_UART].rx_tail;
  36   1          DwinFrame[0].QueneSize = SERIAL_SIZE;
  37   1      
  38   1          DwinFrame[1].pQuene = DataBuf.Busbuf;
  39   1          DwinFrame[1].QueneHead = &DataBuf.Can8283RxHead;
  40   1          DwinFrame[1].QueneTail = &DataBuf.Can8283RxTail;
  41   1          DwinFrame[1].QueneSize = 256;
  42   1      }
  43          
  44          #ifdef ENABLE_CRC
              u16 Calculate_CRC16(u8 *updata, u16 len)
              {
                  u16 Reg_CRC=0xffff;
                  u16 i;
                  u8 j;
                  u16 crctmp;
              
                  for (i=0;i<len;i++)
                  {
                      Reg_CRC^=*updata++;
C51 COMPILER V9.60.0.0   DWIN8283                                                          12/09/2022 13:55:10 PAGE 2   

                      for (j=0;j<8;j++)
                      {
                          if (Reg_CRC & 0x0001)
                          {
                             Reg_CRC=Reg_CRC>>1^0XA001;
                          }
                          else
                          {
                             Reg_CRC>>=1;
                          }
                      }
                  }
                  crctmp = Reg_CRC << 8;
                  crctmp |= (Reg_CRC>>8);
                  // *updata++ = (u8)Reg_CRC;
                  // *updata = (u8)(Reg_CRC>>8);
                  return crctmp;
              }
              #endif
  74          
  75          #ifdef AUTO_UPLOAD
  76          u8 AutoUploadValue(void)
  77          {
  78   1          // u8 buf[MAX_BYTE_LEN];
  79   1          u16 address;
  80   1          u8 len;
  81   1      
  82   1          read_dgus_vp(0xf00,SendTmp,2);
  83   1          if(SendTmp[0]==0x5a)
  84   1          {
  85   2              SendTmp[0] = 0;
  86   2              write_dgus_vp(0xf00,SendTmp,2);
  87   2              len = SendTmp[3];
  88   2              if(len>=200)
  89   2                  len = 100;
  90   2              address = *(u16*)&SendTmp[1];
  91   2              SendTmp[0]=0x5a;
  92   2              SendTmp[1]=0xa5;
  93   2              SendTmp[2]=(len<<1)+4;
  94   2              SendTmp[3]=0x83;
  95   2              SendTmp[4]=address>>8;
  96   2              SendTmp[5]=address;
  97   2              SendTmp[6]=len;
  98   2              read_dgus_vp(address,&SendTmp[7],len);
  99   2              #ifdef ENABLE_CRC
                          *(u16*)&SendTmp[SendTmp[2]+3] = Calculate_CRC16(&SendTmp[3],SendTmp[2]);
                          SendTmp[2] += 2;
                      #endif
 103   2              // Uatr_Send_Data(DWIN_UART,buf[2]+3,buf);
 104   2              return DO_SEND_DATA;
 105   2          }
 106   1          return NOT_SEND_DATA;
 107   1      }
 108          #endif
 109          
 110          u8  Pro8283RxTreat(QUENE *pBuf)
 111          {
 112   1        u16 len,len1,i;
 113   1        // u8 tmp[MAX_BYTE_LEN];
 114   1          u16 tmp16,headtmp,tailtmp;
 115   1      
 116   1        EA = 0;
C51 COMPILER V9.60.0.0   DWIN8283                                                          12/09/2022 13:55:10 PAGE 3   

 117   1          headtmp = *pBuf->QueneHead;
 118   1          EA = 1;
 119   1        if(*pBuf->QueneTail != headtmp)
 120   1        {
 121   2              if(headtmp < *pBuf->QueneTail)
 122   2              {
 123   3                  len = (headtmp+pBuf->QueneSize) - *pBuf->QueneTail;
 124   3              }
 125   2              else
 126   2              {
 127   3                  len = headtmp - *pBuf->QueneTail;
 128   3              }
 129   2              if(len < MIN_CHECK_LEN)
 130   2                  return NOT_SEND_DATA;
 131   2              tmp16 = pBuf->pQuene[*pBuf->QueneTail];
 132   2              tmp16 <<= 8;
 133   2              tailtmp = *pBuf->QueneTail + 1;
 134   2              if (tailtmp >=  pBuf->QueneSize)
 135   2              {
 136   3                  tailtmp = 0;
 137   3              }
 138   2              tmp16 |= pBuf->pQuene[tailtmp];
 139   2          if(FRAME_HEAD == tmp16)
 140   2          {
 141   3                  tailtmp = *pBuf->QueneTail + 3;
 142   3                  if (tailtmp >=  pBuf->QueneSize)
 143   3                  {
 144   4                      tailtmp = 0;
 145   4                  }
 146   3                  if(pBuf->pQuene[tailtmp] == WRITE_VP)
 147   3                  {
 148   4                      tailtmp = *pBuf->QueneTail + 2;
 149   4                      if (tailtmp >=  pBuf->QueneSize)
 150   4                      {
 151   5                          tailtmp = 0;
 152   5                      }
 153   4                      len1 = pBuf->pQuene[tailtmp]+3;
 154   4                      if(len >= len1)
 155   4                      {
 156   5                          for(i=0;i<len1;i++)
 157   5                          {
 158   6                              SendTmp[i] = pBuf->pQuene[*pBuf->QueneTail];
 159   6                              *pBuf->QueneTail += 1;
 160   6                              if (*pBuf->QueneTail >=  pBuf->QueneSize)
 161   6                              {
 162   7                                  *pBuf->QueneTail = 0;
 163   7                              }
 164   6                          }
 165   5                      #ifdef ENABLE_CRC
                                  if(Calculate_CRC16(&SendTmp[3],SendTmp[2])==0)
                                  {
                          SendTmp[2] -= 2;
                              #endif
 170   5                              write_dgus_vp(*(u16*)&SendTmp[4],&SendTmp[6],(SendTmp[2]-3)>>1);
 171   5                              SendTmp[2] = 3;
 172   5                              *(u16*)&SendTmp[4] = 0x4f4b;
 173   5                          #ifdef ENABLE_CRC
                                      *(u16*)&SendTmp[6] = Calculate_CRC16(&SendTmp[3],SendTmp[2]);
                                      SendTmp[2] += 2;
                                  #endif
 177   5                              // Uatr_Send_Data(DWIN_UART,tmp[2]+3,tmp);
 178   5                              return DO_SEND_DATA;
C51 COMPILER V9.60.0.0   DWIN8283                                                          12/09/2022 13:55:10 PAGE 4   

 179   5                      #ifdef ENABLE_CRC
                                  }
                              #endif
 182   5                      }
 183   4                  }
 184   3                  else if(pBuf->pQuene[tailtmp] == READ_VP)
 185   3                  {
 186   4                      tailtmp = *pBuf->QueneTail + 2;
 187   4                      if (tailtmp >=  pBuf->QueneSize)
 188   4                      {
 189   5                          tailtmp = 0;
 190   5                      }
 191   4                      len1 = pBuf->pQuene[tailtmp]+3;
 192   4                      if(len >= len1)
 193   4                      {
 194   5                          for(i=0;i<len1;i++)
 195   5                          {
 196   6                              SendTmp[i] = pBuf->pQuene[*pBuf->QueneTail];
 197   6                              *pBuf->QueneTail += 1;
 198   6                              if (*pBuf->QueneTail >=  pBuf->QueneSize)
 199   6                              {
 200   7                                  *pBuf->QueneTail = 0;
 201   7                              }
 202   6                          }
 203   5                          #ifdef ENABLE_CRC
                                      if(Calculate_CRC16(&SendTmp[3],SendTmp[2])==0)
                                      {
                                  #endif
 207   5                                  read_dgus_vp(*(u16*)&SendTmp[4],&SendTmp[7],SendTmp[6]);
 208   5                                  SendTmp[2] = (SendTmp[6]<<1) + 4;
 209   5                              #ifdef ENABLE_CRC
                                          *(u16*)&SendTmp[SendTmp[2]+3] = Calculate_CRC16(&SendTmp[3],SendTmp[2]);
                                          SendTmp[2] += 2;
                                      #endif
 213   5                                  // Uatr_Send_Data(DWIN_UART,tmp[2]+3,tmp);
 214   5                                  return DO_SEND_DATA;
 215   5                          #ifdef ENABLE_CRC
                                      }
                                  #endif
 218   5                      }
 219   4                  }
 220   3                  else 
 221   3                  {
 222   4                      *pBuf->QueneTail += 1;
 223   4                      if (*pBuf->QueneTail >=  pBuf->QueneSize)
 224   4                      {
 225   5                          *pBuf->QueneTail = 0;
 226   5                      }
 227   4                  }
 228   3          }
 229   2          else
 230   2          {
 231   3            *pBuf->QueneTail += 1;
 232   3                  if (*pBuf->QueneTail >=  pBuf->QueneSize)
 233   3                  {
 234   4                      *pBuf->QueneTail = 0;
 235   4                  }
 236   3          }
 237   2        }
 238   1          return NOT_SEND_DATA;
 239   1      }
 240          
C51 COMPILER V9.60.0.0   DWIN8283                                                          12/09/2022 13:55:10 PAGE 5   

 241          
 242          #define FRAME_ID 0X23
 243          void Pro8283Deal(void)
 244          {
 245   1        u8 i,len;
 246   1      
 247   1          //把CAN的数据解析到缓存区
 248   1          if(CanData.CanRxHead != CanData.CanRxTail)
 249   1        {
 250   2          if(CanData.BusRXbuf[CanData.CanRxTail].ID == (u32)FRAME_ID)
 251   2              {
 252   3                  len = CanData.BusRXbuf[CanData.CanRxTail].status & 0x0f;
 253   3                  for(i=0;i<len;i++)
 254   3                  {
 255   4                      DataBuf.Busbuf[DataBuf.Can8283RxHead] = CanData.BusRXbuf[CanData.CanRxTail].candata[i];
 256   4                      DataBuf.Can8283RxHead++;
 257   4                  }
 258   3              }
 259   2          CanData.CanRxTail++;
 260   2        }
 261   1      #ifdef AUTO_UPLOAD
 262   1          if(DO_SEND_DATA == AutoUploadValue())
 263   1          {
 264   2              Uatr_Send_Data(DWIN_UART,SendTmp[2]+3,SendTmp);
 265   2              CanTx(0x23,0,SendTmp[2]+3,SendTmp);
 266   2          }
 267   1      #endif
 268   1          if(DO_SEND_DATA == Pro8283RxTreat(&DwinFrame[0]))
 269   1          {
 270   2              Uatr_Send_Data(DWIN_UART,SendTmp[2]+3,SendTmp);
 271   2          }
 272   1          if(DO_SEND_DATA == Pro8283RxTreat(&DwinFrame[1]))
 273   1          {
 274   2              CanTx(0x24,0,SendTmp[2]+3,SendTmp);
 275   2          }
 276   1      }
 277          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1992    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =    794      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
